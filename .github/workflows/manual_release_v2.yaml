
name: Build & Release

on:
  workflow_dispatch:
    inputs:
      bump_minor:
        description: "Bump minor version"
        required: false
        default: "false"
      bump_major:
        description: "Bump major version"
        required: false
        default: "false"
      release_type:
        description: "either stable or beta"
        required: false
        default: "beta"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Blender
        run: |
          sudo add-apt-repository ppa:thomas-schiex/blender -y
          sudo apt-get update
          sudo apt-get install -y blender

      - name: Get latest release tag and calculate new version
        id: get_tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          release_tags=$(gh api repos/${{ github.repository }}/releases --jq '.[].tag_name' 2>/dev/null || echo "")

          if [[ -z "$release_tags" ]]; then
            latest_tag="v0.0.0"
          else
            stable_releases=$(echo "$release_tags" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V -r)
            if [[ -z "$stable_releases" ]]; then
              latest_tag="v0.0.0"
            else
              latest_tag=$(echo "$stable_releases" | head -n1)
            fi
          fi

          latest_tag_clean="${latest_tag#v}"
          IFS='.' read -r major minor patch <<< "$latest_tag_clean"

          if [[ "${{ github.event.inputs.bump_major }}" == "true" ]]; then
            major=$((major + 1)); minor=0; patch=0
          elif [[ "${{ github.event.inputs.bump_minor }}" == "true" ]]; then
            minor=$((minor + 1)); patch=0
          fi

          patch=$((patch + 1))
          base_version="$major.$minor.$patch"

          release_type="${{ github.event.inputs.release_type }}"
          if [[ "$release_type" == "beta" ]]; then
            existing_betas=$(echo "$release_tags" | grep -E "^${base_version}-beta[0-9]+$" | sort -V -r)
            if [[ -z "$existing_betas" ]]; then
              beta_version=1
            else
              last_beta=$(echo "$existing_betas" | head -n1)
              beta_suffix="${last_beta#${base_version}-beta}"
              beta_version=$((beta_suffix + 1))
            fi
            new_tag="${base_version}-beta${beta_version}"
          else
            new_tag="$base_version"
          fi

          echo "new_tag=$new_tag" >> "$GITHUB_OUTPUT"
          echo "new_tag_with_v=v$new_tag" >> "$GITHUB_OUTPUT"

      - name: Build add-on zip with Blender
        run: |
          mkdir -p builds
          blender --background --command extension build \
            --source-dir . \
            --output-dir builds

      - name: Generate index.json with Blender
        run: |
          blender --background --command extension server-generate --repo-dir=.

      - name: Commit and push build + index.json to gh-page (stable only)
        if: ${{ github.event.inputs.release_type == 'stable' }}
        run: |
          repo_name=$(basename `git rev-parse --show-toplevel`)

          git fetch origin gh-page || true
          git checkout gh-page || git checkout --orphan gh-page

          mkdir -p builds
          cp "builds/${repo_name}.zip" "builds/${repo_name}.zip"
          cp index.json index.json

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add builds/${repo_name}.zip index.json
          git commit -m "Update build and index.json for ${{ steps.get_tag.outputs.new_tag }}"
          git push origin gh-page

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_tag.outputs.new_tag_with_v }}
          name: Release ${{ steps.get_tag.outputs.new_tag }}
          files: builds/*.zip
          draft: false
          prerelease: ${{ github.event.inputs.release_type == 'beta' }}
